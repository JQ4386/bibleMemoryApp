import React, { useState } from 'react';

function App() {
  const [isRecording, setIsRecording] = useState(false);
  const [transcription, setTranscription] = useState('');
  const [transcriptionError, setTranscriptionError] = useState('');
  const [recognition, setRecognition] = useState(null);
  const [bibleVerses, setBibleVerses] = useState([]);
  const [loading, setLoading] = useState(false);

 const startRecording = () => {
    if ('webkitSpeechRecognition' in window) {
      const speechRecognition = new window.webkitSpeechRecognition();
      speechRecognition.continuous = true;
      speechRecognition.interimResults = true;
      speechRecognition.lang = 'en-US';
      
      speechRecognition.onstart = () => {
        setIsRecording(true);
      };

      speechRecognition.onresult = (event) => {
        let interimTranscript = '';
        for (let i = event.resultIndex; i < event.results.length; ++i) {
          if (event.results[i].isFinal) {
            setTranscription(transcription + event.results[i][0].transcript);
          } else {
            interimTranscript += event.results[i][0].transcript;
          }
        }
        setTranscription(transcription + interimTranscript);
      };

      speechRecognition.onerror = (event) => {
        setTranscriptionError('Speech recognition error: ' + event.error);
      };

      speechRecognition.onend = () => {
        setIsRecording(false);
      };

      speechRecognition.start();
      setRecognition(speechRecognition);
    } else {
      setTranscriptionError('Web Speech API is not supported in this browser.');
    }
  };

  const stopRecording = () => {
    if (recognition) {
      recognition.stop();
      setIsRecording(false);
      setRecognition(null);
    }
  };

  // Function to fetch Bible verses
  const fetchBibleVerses = async () => {
    setLoading(true);
    setBibleVerses([]);

    // Replace with your actual API URL and query parameters
    const apiURL = `http://localhost:35907/search?language=en&word=${encodeURIComponent(transcription)}`;
    try {
      const response = await fetch(apiURL);
      const data = await response.json();

      // Assuming 'data.searches' contains the verses
      setBibleVerses(data.searches);
    } catch (error) {
      console.error("API Error:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <header>
        <h1>Bible Verse Memory App</h1>
      </header>

      <main>
        <button onClick={startRecording} disabled={isRecording}>Start Recording</button>
        <button onClick={stopRecording} disabled={!isRecording}>Stop Recording</button>
        <button onClick={fetchBibleVerses} disabled={!transcription}>Fetch Bible Verses</button>

        <section className="transcription-section">
          <h3>Transcription</h3>
          {transcriptionError ? (
            <p>Error: {transcriptionError}</p>
          ) : (
            <p>{transcription}</p>
          )}
        </section>

        <section className="bible-verses-section">
          <h3>Bible Verses</h3>
          {loading ? <p>Loading...</p> : bibleVerses.map((verse, index) => (
            <p key={index}>{verse.text}</p>
          ))}
        </section>
      </main>
    </div>
  );
}

export default App;

